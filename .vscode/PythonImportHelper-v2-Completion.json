[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "csv_file",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "csv_file = input(\"Nom du fichier CSV (ex: data.csv) : \").strip() or \"data.csv\"\ninvestment_per_day = float(input(\"Montant √† investir par jour (‚Ç¨) (ex: 10) : \") or 10)\nfgi_threshold = int(input(\"Seuil FGI pour acheter (<) ou vendre (>=) (ex: 60) : \") or 60)\nprint(\"\\n‚ñ∂Ô∏è  D√©marrage du backtest...\\n\")\n# --- Load Data ---\ndf = pd.read_csv(csv_file, parse_dates=['Date'])\ndf = df.set_index('Date')\n# --- Initial conditions ---\ncash = 0\nbtc_holdings = 0.0",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "investment_per_day",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "investment_per_day = float(input(\"Montant √† investir par jour (‚Ç¨) (ex: 10) : \") or 10)\nfgi_threshold = int(input(\"Seuil FGI pour acheter (<) ou vendre (>=) (ex: 60) : \") or 60)\nprint(\"\\n‚ñ∂Ô∏è  D√©marrage du backtest...\\n\")\n# --- Load Data ---\ndf = pd.read_csv(csv_file, parse_dates=['Date'])\ndf = df.set_index('Date')\n# --- Initial conditions ---\ncash = 0\nbtc_holdings = 0.0\ncash_invested = 0",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "fgi_threshold",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "fgi_threshold = int(input(\"Seuil FGI pour acheter (<) ou vendre (>=) (ex: 60) : \") or 60)\nprint(\"\\n‚ñ∂Ô∏è  D√©marrage du backtest...\\n\")\n# --- Load Data ---\ndf = pd.read_csv(csv_file, parse_dates=['Date'])\ndf = df.set_index('Date')\n# --- Initial conditions ---\ncash = 0\nbtc_holdings = 0.0\ncash_invested = 0\nhistory = []",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "df = pd.read_csv(csv_file, parse_dates=['Date'])\ndf = df.set_index('Date')\n# --- Initial conditions ---\ncash = 0\nbtc_holdings = 0.0\ncash_invested = 0\nhistory = []\n# --- Simulation ---\nfor date, row in df.iterrows():\n    close_price = row['Close']",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "df = df.set_index('Date')\n# --- Initial conditions ---\ncash = 0\nbtc_holdings = 0.0\ncash_invested = 0\nhistory = []\n# --- Simulation ---\nfor date, row in df.iterrows():\n    close_price = row['Close']\n    fgi_value = row['fgi_value']",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "cash",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "cash = 0\nbtc_holdings = 0.0\ncash_invested = 0\nhistory = []\n# --- Simulation ---\nfor date, row in df.iterrows():\n    close_price = row['Close']\n    fgi_value = row['fgi_value']\n    if fgi_value < fgi_threshold:\n        # BUY",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "btc_holdings",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "btc_holdings = 0.0\ncash_invested = 0\nhistory = []\n# --- Simulation ---\nfor date, row in df.iterrows():\n    close_price = row['Close']\n    fgi_value = row['fgi_value']\n    if fgi_value < fgi_threshold:\n        # BUY\n        btc_bought = investment_per_day / close_price",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "cash_invested",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "cash_invested = 0\nhistory = []\n# --- Simulation ---\nfor date, row in df.iterrows():\n    close_price = row['Close']\n    fgi_value = row['fgi_value']\n    if fgi_value < fgi_threshold:\n        # BUY\n        btc_bought = investment_per_day / close_price\n        btc_holdings += btc_bought",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "history = []\n# --- Simulation ---\nfor date, row in df.iterrows():\n    close_price = row['Close']\n    fgi_value = row['fgi_value']\n    if fgi_value < fgi_threshold:\n        # BUY\n        btc_bought = investment_per_day / close_price\n        btc_holdings += btc_bought\n        cash -= investment_per_day",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "final_df",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "final_df = pd.DataFrame(history)\nfinal_df.set_index('Date', inplace=True)\n# Save result\nresult_filename = 'backtest_result.csv'\nfinal_df.to_csv(result_filename)\n# --- Results ---\nfinal_value = final_df.iloc[-1]['Portfolio Value']\ntotal_invested = final_df.iloc[-1]['Cash Invested']\nprint(\"\\nüîî R√©sultat Final :\")\nprint(f\"Valeur Finale du Portfolio : {final_value:.2f}‚Ç¨\")",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "result_filename",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "result_filename = 'backtest_result.csv'\nfinal_df.to_csv(result_filename)\n# --- Results ---\nfinal_value = final_df.iloc[-1]['Portfolio Value']\ntotal_invested = final_df.iloc[-1]['Cash Invested']\nprint(\"\\nüîî R√©sultat Final :\")\nprint(f\"Valeur Finale du Portfolio : {final_value:.2f}‚Ç¨\")\nprint(f\"Cash Investi Total : {total_invested:.2f}‚Ç¨\")\nprint(f\"Profit : {(final_value - total_invested):.2f}‚Ç¨\")\nprint(f\"(Donn√©es enregistr√©es dans {result_filename})\")",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "final_value",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "final_value = final_df.iloc[-1]['Portfolio Value']\ntotal_invested = final_df.iloc[-1]['Cash Invested']\nprint(\"\\nüîî R√©sultat Final :\")\nprint(f\"Valeur Finale du Portfolio : {final_value:.2f}‚Ç¨\")\nprint(f\"Cash Investi Total : {total_invested:.2f}‚Ç¨\")\nprint(f\"Profit : {(final_value - total_invested):.2f}‚Ç¨\")\nprint(f\"(Donn√©es enregistr√©es dans {result_filename})\")\n# --- Plot ---\nplt.figure(figsize=(16, 9))\nplt.plot(final_df.index, final_df['Cash Invested'], label='üí∂ Cash Invested', color='blue')",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "total_invested",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "total_invested = final_df.iloc[-1]['Cash Invested']\nprint(\"\\nüîî R√©sultat Final :\")\nprint(f\"Valeur Finale du Portfolio : {final_value:.2f}‚Ç¨\")\nprint(f\"Cash Investi Total : {total_invested:.2f}‚Ç¨\")\nprint(f\"Profit : {(final_value - total_invested):.2f}‚Ç¨\")\nprint(f\"(Donn√©es enregistr√©es dans {result_filename})\")\n# --- Plot ---\nplt.figure(figsize=(16, 9))\nplt.plot(final_df.index, final_df['Cash Invested'], label='üí∂ Cash Invested', color='blue')\nplt.plot(final_df.index, final_df['Equity'], label='üè¶ Equity (Portfolio Value + Cash Invested)', color='purple', linestyle='--')",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "buy_signals",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "buy_signals = final_df[final_df['Action'].str.contains('BUY')]\nsell_signals = final_df[final_df['Action'].str.contains('SELL')]\nplt.scatter(buy_signals.index, buy_signals['Equity'], label='üü¢ Buy', marker='^', color='lime', s=100)\nplt.scatter(sell_signals.index, sell_signals['Equity'], label='üî¥ Sell', marker='v', color='red', s=100)\nplt.title(f'Backtest: Invest {investment_per_day}‚Ç¨/day if FGI < {fgi_threshold}, Sell otherwise')\nplt.xlabel('Date')\nplt.ylabel('‚Ç¨ Value')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "sell_signals",
        "kind": 5,
        "importPath": "backTestDcaFG",
        "description": "backTestDcaFG",
        "peekOfCode": "sell_signals = final_df[final_df['Action'].str.contains('SELL')]\nplt.scatter(buy_signals.index, buy_signals['Equity'], label='üü¢ Buy', marker='^', color='lime', s=100)\nplt.scatter(sell_signals.index, sell_signals['Equity'], label='üî¥ Sell', marker='v', color='red', s=100)\nplt.title(f'Backtest: Invest {investment_per_day}‚Ç¨/day if FGI < {fgi_threshold}, Sell otherwise')\nplt.xlabel('Date')\nplt.ylabel('‚Ç¨ Value')\nplt.legend()\nplt.grid(True)\nplt.tight_layout()\nplt.show()",
        "detail": "backTestDcaFG",
        "documentation": {}
    },
    {
        "label": "ticker",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "ticker = 'BTC-USD'\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=90)\nbtc_data = yf.download(\n    ticker,\n    start=start_date.strftime('%Y-%m-%d'),\n    end=end_date.strftime('%Y-%m-%d'),\n    interval='1d'\n)\nbtc_data.index = pd.to_datetime(btc_data.index).normalize()",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "end_date",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "end_date = datetime.now()\nstart_date = end_date - timedelta(days=90)\nbtc_data = yf.download(\n    ticker,\n    start=start_date.strftime('%Y-%m-%d'),\n    end=end_date.strftime('%Y-%m-%d'),\n    interval='1d'\n)\nbtc_data.index = pd.to_datetime(btc_data.index).normalize()\n# üî• Flatten column names if MultiIndex",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "start_date",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "start_date = end_date - timedelta(days=90)\nbtc_data = yf.download(\n    ticker,\n    start=start_date.strftime('%Y-%m-%d'),\n    end=end_date.strftime('%Y-%m-%d'),\n    interval='1d'\n)\nbtc_data.index = pd.to_datetime(btc_data.index).normalize()\n# üî• Flatten column names if MultiIndex\nif isinstance(btc_data.columns, pd.MultiIndex):",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "btc_data",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "btc_data = yf.download(\n    ticker,\n    start=start_date.strftime('%Y-%m-%d'),\n    end=end_date.strftime('%Y-%m-%d'),\n    interval='1d'\n)\nbtc_data.index = pd.to_datetime(btc_data.index).normalize()\n# üî• Flatten column names if MultiIndex\nif isinstance(btc_data.columns, pd.MultiIndex):\n    btc_data.columns = [' '.join(col).strip() for col in btc_data.columns]",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "btc_data.index",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "btc_data.index = pd.to_datetime(btc_data.index).normalize()\n# üî• Flatten column names if MultiIndex\nif isinstance(btc_data.columns, pd.MultiIndex):\n    btc_data.columns = [' '.join(col).strip() for col in btc_data.columns]\n# Step 2: Fetch Fear and Greed Index data\nfgi_response = requests.get('https://api.alternative.me/fng/?limit=90&format=json')\nfgi_data = fgi_response.json()['data']\nfgi_df = pd.DataFrame([\n    {\n        'date': datetime.fromtimestamp(int(item['timestamp'])).date(),",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "fgi_response",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "fgi_response = requests.get('https://api.alternative.me/fng/?limit=90&format=json')\nfgi_data = fgi_response.json()['data']\nfgi_df = pd.DataFrame([\n    {\n        'date': datetime.fromtimestamp(int(item['timestamp'])).date(),\n        'fgi_value': int(item['value']),\n        'fgi_classification': item['value_classification']\n    }\n    for item in fgi_data\n])",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "fgi_data",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "fgi_data = fgi_response.json()['data']\nfgi_df = pd.DataFrame([\n    {\n        'date': datetime.fromtimestamp(int(item['timestamp'])).date(),\n        'fgi_value': int(item['value']),\n        'fgi_classification': item['value_classification']\n    }\n    for item in fgi_data\n])\nfgi_df.set_index('date', inplace=True)",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "fgi_df",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "fgi_df = pd.DataFrame([\n    {\n        'date': datetime.fromtimestamp(int(item['timestamp'])).date(),\n        'fgi_value': int(item['value']),\n        'fgi_classification': item['value_classification']\n    }\n    for item in fgi_data\n])\nfgi_df.set_index('date', inplace=True)\nfgi_df.index = pd.to_datetime(fgi_df.index)",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "fgi_df.index",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "fgi_df.index = pd.to_datetime(fgi_df.index)\n# Step 3: Merge BTC data with FGI data\nmerged = btc_data.join(fgi_df, how='left')\n# üî• Detect Close column\nclose_column = next((col for col in merged.columns if 'Close' in col), None)\nif close_column is None:\n    raise ValueError(\"‚ùå Couldn't find a Close column!\")\n# Keep only Close, fgi_value, fgi_classification\nmerged = merged[[close_column, 'fgi_value', 'fgi_classification']]\nmerged = merged.rename(columns={close_column: 'Close'})",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "merged",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "merged = btc_data.join(fgi_df, how='left')\n# üî• Detect Close column\nclose_column = next((col for col in merged.columns if 'Close' in col), None)\nif close_column is None:\n    raise ValueError(\"‚ùå Couldn't find a Close column!\")\n# Keep only Close, fgi_value, fgi_classification\nmerged = merged[[close_column, 'fgi_value', 'fgi_classification']]\nmerged = merged.rename(columns={close_column: 'Close'})\n# Step 4: Save to CSV\ntimestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "close_column",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "close_column = next((col for col in merged.columns if 'Close' in col), None)\nif close_column is None:\n    raise ValueError(\"‚ùå Couldn't find a Close column!\")\n# Keep only Close, fgi_value, fgi_classification\nmerged = merged[[close_column, 'fgi_value', 'fgi_classification']]\nmerged = merged.rename(columns={close_column: 'Close'})\n# Step 4: Save to CSV\ntimestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\ncsv_filename = \"data.csv\"\nmerged.to_csv(csv_filename)",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "merged",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "merged = merged[[close_column, 'fgi_value', 'fgi_classification']]\nmerged = merged.rename(columns={close_column: 'Close'})\n# Step 4: Save to CSV\ntimestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\ncsv_filename = \"data.csv\"\nmerged.to_csv(csv_filename)\nprint(f\"‚úÖ Merged BTC + FGI data saved to {csv_filename}\")",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "merged",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "merged = merged.rename(columns={close_column: 'Close'})\n# Step 4: Save to CSV\ntimestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\ncsv_filename = \"data.csv\"\nmerged.to_csv(csv_filename)\nprint(f\"‚úÖ Merged BTC + FGI data saved to {csv_filename}\")",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "timestamp",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\ncsv_filename = \"data.csv\"\nmerged.to_csv(csv_filename)\nprint(f\"‚úÖ Merged BTC + FGI data saved to {csv_filename}\")",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "csv_filename",
        "kind": 5,
        "importPath": "getData",
        "description": "getData",
        "peekOfCode": "csv_filename = \"data.csv\"\nmerged.to_csv(csv_filename)\nprint(f\"‚úÖ Merged BTC + FGI data saved to {csv_filename}\")",
        "detail": "getData",
        "documentation": {}
    },
    {
        "label": "run_backtest",
        "kind": 2,
        "importPath": "opti",
        "description": "opti",
        "peekOfCode": "def run_backtest(df, investment_per_day, fgi_threshold, sell_amount):\n    cash = 0\n    btc_holdings = 0.0\n    cash_invested = 0.0\n    for date, row in df.iterrows():\n        close_price = row['Close']\n        fgi_value = row['fgi_value']\n        # Deposit money every day\n        cash += investment_per_day\n        if fgi_value < fgi_threshold:",
        "detail": "opti",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "opti",
        "description": "opti",
        "peekOfCode": "def main():\n    print(\"‚ñ∂Ô∏è  Chargement des donn√©es...\")\n    filename = \"data.csv\"\n    try:\n        df = pd.read_csv(filename, parse_dates=['Date'])\n        df.set_index('Date', inplace=True)\n    except Exception as e:\n        print(f\"Erreur lors du chargement du fichier : {e}\")\n        return\n    investment_per_day = 10  # ‚Ç¨ investis par jour",
        "detail": "opti",
        "documentation": {}
    },
    {
        "label": "install_requirements",
        "kind": 2,
        "importPath": "start",
        "description": "start",
        "peekOfCode": "def install_requirements():\n    try:\n        print(\"Installation des d√©pendances...\")\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-r\", \"requirements.txt\"])\n        with open(INSTALL_FLAG_FILE, \"w\") as f:\n            f.write(\"installed\")\n        print(\"D√©pendances install√©es.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Erreur lors de l'installation : {e}\")\n        sys.exit(1)",
        "detail": "start",
        "documentation": {}
    },
    {
        "label": "run_scripts",
        "kind": 2,
        "importPath": "start",
        "description": "start",
        "peekOfCode": "def run_scripts():\n    try:\n        print(\"Ex√©cution de getData.py...\")\n        subprocess.check_call([sys.executable, \"getData.py\"])\n        print(\"J'essaye de trouver les meilleurs param√®tres...\")\n        subprocess.check_call([sys.executable, \"opti.py\"])\n    except subprocess.CalledProcessError as e:\n        print(f\"Erreur lors de l'ex√©cution des scripts : {e}\")\n        sys.exit(1)\ndef main():",
        "detail": "start",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "start",
        "description": "start",
        "peekOfCode": "def main():\n    if not os.path.exists(INSTALL_FLAG_FILE):\n        install_requirements()\n    else:\n        print(\"D√©pendances d√©j√† install√©es, passage √† l'ex√©cution.\")\n    run_scripts()\nif __name__ == \"__main__\":\n    main()",
        "detail": "start",
        "documentation": {}
    },
    {
        "label": "INSTALL_FLAG_FILE",
        "kind": 5,
        "importPath": "start",
        "description": "start",
        "peekOfCode": "INSTALL_FLAG_FILE = \"install_done.txt\"\ndef install_requirements():\n    try:\n        print(\"Installation des d√©pendances...\")\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-r\", \"requirements.txt\"])\n        with open(INSTALL_FLAG_FILE, \"w\") as f:\n            f.write(\"installed\")\n        print(\"D√©pendances install√©es.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Erreur lors de l'installation : {e}\")",
        "detail": "start",
        "documentation": {}
    }
]